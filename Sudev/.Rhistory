names <- list.files(path = "data/us_individual_collar_data", pattern = ".txt")
names_list <- strsplit(names, split = ".txt")
names_list
names_vec <- unlist(names_list)
names_vec
names(data_files) <- names_vec
names(data_files)
data_files_all <- bind_rows(data_files)
for (i in 1:length(data_files)){
data_files[i] <- as.data.frame(read_csv(data_files[i]))
}
names <- list.files(path = "data/us_individual_collar_data", pattern = ".txt")
names_list <- strsplit(names, split = " .txt")
names_list
names_vec <- unlist(names_list)
names_vec
names(data_files) <- names_vec
names(data_files)
data_files_all <- bind_rows(data_files)
for (i in 1:length(data_files)){
data_files[i] <- as.data.frame(read_csv(data_files[i]))
}
View(data_files)
data_files[["collar-data-A1-2016-02-26.txt"]]
names <- list.files(path = "data/us_individual_collar_data", pattern = ".txt")
names_list <- strsplit(names, split = " .txt")
names_list
names_vec <- unlist(names_list)
names_vec
names(data_files) <- names_vec
names(data_files)
data_files_all <- bind_rows(data_files)
for (i in 2:length(data_files)){
data_files[i] <- as.data.frame(read_csv(data_files[i]))
}
names <- list.files(path = "data/us_individual_collar_data", pattern = ".txt")
names_list <- strsplit(names, split = " .txt")
names_list
names_vec <- unlist(names_list)
names_vec
names(data_files) <- names_vec
names(data_files)
data_files_all <- bind_rows(data_files)
for (i in 1:length(data_files)){
data_files[i] <- as.data.frame(read_csv(names_vec[i]))
}
data_files[i] <- as.data.frame(read_csv(cat("data",names_vec[i])))
names <- list.files(path = "data/us_individual_collar_data", pattern = ".txt")
names_list <- strsplit(names, split = " .txt")
names_list
names_vec <- unlist(names_list)
names_vec
names(data_files) <- names_vec
names(data_files)
data_files_all <- bind_rows(data_files)
for (i in 1:length(data_files)){
data_files[i] <- as.data.frame(read_csv(cat("data",names_vec[i-1])))
}
View(data_files)
View(data_files_all)
names <- list.files(path = "data/us_individual_collar_data", pattern = ".txt")
names_list <- strsplit(names, split = " .txt")
names_list
names_vec <- unlist(names_list)
names_vec
names(data_files) <- names_vec
names(data_files)
data_files_all <- bind_rows(data_files)
for (i in 1:length(data_files)){
data_files[i] <- as.data.frame(read_csv(data_files[i]))
}
#?hyper
data(hyper)
summary(hyper)
plotMap(hyper,show.marker.names=TRUE)
plotMap(hyper,show.marker.names=FALSE)
plotMissing(hyper, main="")
plotMissing(hyper, main="")
plotMissing(sug, main="", reorder=1)
plotMissing(hyper, main="")
plotMissing(hyper, main="", reorder=1)
longitudinal<- readr::read_csv(here("data","oasis_longitudinal.csv"))
cross_sectional<- readr::read_csv(here("data","oasis_cross-sectional.csv"))
shinyApp(
ui = pageWithSidebar(
headerPanel("SES"),
sidebarPanel(
selectizeInput('var1', 'Select variable 1', choices = c("choose" = "", levels(longitudinal$SES))),
),
mainPanel(
tableOutput("table")
)
),
server = function(input, output, session) {
tab <- reactive({ # <-- Reactive function here
longitudinal %>%
filter(SES == input$var1)
})
output$table <- renderTable({
tab()
})
},
options = list(height = 500)
)
shinyApp(
ui = pageWithSidebar(
headerPanel("SES"),
sidebarPanel(
selectizeInput('var1', 'Select variable 1', choices = unique((longitudinal$SES)),
),
mainPanel(
tableOutput("table")
)
),
server = function(input, output, session) {
tab <- reactive({ # <-- Reactive function here
longitudinal %>%
filter(SES == input$var1)
})
output$table <- renderTable({
tab()
})
},
options = list(height = 500)
)
shinyApp(
ui = pageWithSidebar(
headerPanel("SES"),
sidebarPanel(
selectizeInput('var1', 'Select variable 1', choices = unique((longitudinal$SES)),
),
mainPanel(
tableOutput("table")
)
),
server = function(input, output, session) {
tab <- reactive({ # <-- Reactive function here
longitudinal %>%
filter(SES == input$var1)
})
output$table <- renderTable({
tab()
})
},
options = list(height = 500)
)
shinyApp(
ui = pageWithSidebar(
headerPanel("SES"),
sidebarPanel(
selectizeInput('var1', 'Select variable 1', choices = unique((longitudinal$SES)),
)
mainPanel(
shinyApp(
ui = pageWithSidebar(
headerPanel("SES"),
sidebarPanel(
selectizeInput('var1', 'Select variable 1', choices=unique(homerange$taxon))),
),
mainPanel(
tableOutput("table")
)
),
shinyApp(
ui = pageWithSidebar(
headerPanel("SES"),
sidebarPanel(
selectizeInput('var1', 'Select variable 1', choices = c("choose" = "", levels(longitudinal$SES))),
),
mainPanel(
tableOutput("table")
)
),
server = function(input, output, session) {
tab <- reactive({ # <-- Reactive function here
longitudinal %>%
filter(SES == input$var1)
})
output$table <- renderTable({
tab()
})
},
options = list(height = 500)
)
shinyApp(
ui = pageWithSidebar(
headerPanel("SES"),
sidebarPanel(
selectizeInput('var1', 'Select variable 1', choices = c("choose" = "", unique(longitudinal$SES))),
),
mainPanel(
tableOutput("table")
)
),
server = function(input, output, session) {
tab <- reactive({ # <-- Reactive function here
longitudinal %>%
filter(SES == input$var1)
})
output$table <- renderTable({
tab()
})
},
options = list(height = 500)
)
shinyApp(
ui = pageWithSidebar(
headerPanel("SES"),
sidebarPanel(
selectizeInput('var1', 'Select variable 1', choices = c("choose" = "", unique(longitudinal$SES))),
),
mainPanel(
tableOutput("table")
)
),
server = function(input, output, session) {
tab <- reactive({ # <-- Reactive function here
longitudinal %>%
filter(SES == input$var1) %>%
nrow()
})
output$table <- renderTable({
tab()
})
},
options = list(height = 500)
)
shinyApp(
ui = pageWithSidebar(
headerPanel("SES"),
sidebarPanel(
selectizeInput('var1', 'Select variable 1', choices = c("choose" = "", unique(longitudinal$SES))),
),
mainPanel(
tableOutput("table")
)
),
server = function(input, output, session) {
tab <- reactive({ # <-- Reactive function here
longitudinal %>%
filter(SES == input$var1) %>%
nrow()
})
output$table <- renderTable({
tab()
})
},
options = list(height = 500)
)
n_patients <- longitudinal%>%
filter(SES==2) %>%
nrow()
cat(n_patients,"fit listed criteria")
ui <- fluidPage(
selectInput("SES", "Select Economic Status", choices=unique(longitudinal$SES)),
selectInput("Age", "Select Age", choices = c("50-60", "60-70", "70-80", "80-90")),
textOutput("result")
)
server <- function(input, output, session) {
var <-  reactive({longitudinal %>%
filter(SES==input$SES) %>%
nrow()
})
output$result <- renderText({
c(var(),"patients that meet listed search criteria")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
n_patients <- longitudinal%>%
filter(SES==2) %>%
nrow()
cat(n_patients,"fit listed criteria")
ui <- fluidPage(
selectInput("SES", "Select Economic Status", choices=unique(longitudinal$SES)),
selectInput("Age", "Select Age", choices = c("50-60", "60-70", "70-80", "80-90")),
textOutput("result")
)
server <- function(input, output, session) {
var <-  reactive({longitudinal %>%
filter(SES==input$SES) %>%
nrow()
})
output$result <- renderText({
c(var(),"patients meet listed search criteria")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
n_patients <- longitudinal%>%
filter(SES==2) %>%
nrow()
cat(n_patients,"fit listed criteria")
ui <- fluidPage(
selectInput("SES", "Select Economic Status", choices=unique(longitudinal$SES)),
selectInput("Age", "Select Age", choices = c("50-60", "60-70", "70-80", "80-90")),
textOutput("result")
)
server <- function(input, output, session) {
numpatients <-  reactive({longitudinal %>%
filter(SES==input$SES) %>%
nrow()
})
numdemented <-  reactive({longitudinal %>%
filter(Group=='Demented') %>%
nrow()
})
output$result <- renderText({
c(numpatients(),"patients meet listed search criteria, out of which", numdemented(), "have dementia")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
n_patients <- longitudinal%>%
filter(SES==2) %>%
nrow()
cat(n_patients,"fit listed criteria")
ui <- fluidPage(
selectInput("SES", "Select Economic Status", choices=unique(longitudinal$SES)),
selectInput("Age", "Select Age", choices = c("50-60", "60-70", "70-80", "80-90")),
textOutput("result")
)
server <- function(input, output, session) {
numpatients <-  reactive({longitudinal %>%
filter(SES==input$SES) %>%
nrow()
})
numdemented <-  reactive({longitudinal %>%
filter(SES==input$SES) %>%
filter(Group=='Demented') %>%
nrow()
})
output$result <- renderText({
c(numpatients(),"patients meet listed search criteria, out of which", numdemented(), "have dementia")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
n_patients <- longitudinal%>%
filter(SES==2) %>%
nrow()
cat(n_patients,"fit listed criteria")
ui <- fluidPage(
selectInput("SES", "Select Economic Status", choices=unique(longitudinal$SES)),
selectInput("Age", "Select Age", choices = c("50-60", "60-70", "70-80", "80-90")),
textOutput("result")
)
server <- function(input, output, session) {
numpatients <-  reactive({longitudinal %>%
filter(SES==input$SES) %>%
nrow()
})
numdemented <-  reactive({longitudinal %>%
filter(SES==input$SES) %>%
filter(Group=='Demented') %>%
nrow()
})
output$result <- renderText({
c(numpatients(),"patients meet listed search criteria, out of which", numdemented(), "have dementia or", numdemented()/numpatients(), "% of the sample")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
n_patients <- longitudinal%>%
filter(SES==2) %>%
nrow()
cat(n_patients,"fit listed criteria")
ui <- fluidPage(
selectInput("SES", "Select Economic Status", choices=unique(longitudinal$SES)),
selectInput("Age", "Select Age", choices = c("50-60", "60-70", "70-80", "80-90")),
textOutput("result")
)
server <- function(input, output, session) {
numpatients <-  reactive({longitudinal %>%
filter(SES==input$SES) %>%
nrow()
})
numdemented <-  reactive({longitudinal %>%
filter(SES==input$SES) %>%
filter(Group=='Demented') %>%
nrow()
})
output$result <- renderText({
c(numpatients(),"patients meet listed search criteria, out of which", numdemented(), "have dementia or", round((numdemented()/numpatients())*100), "% of the sample")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
n_patients <- longitudinal%>%
filter(SES==2) %>%
nrow()
cat(n_patients,"fit listed criteria")
ui <- fluidPage(
selectInput("SES", "Select Economic Status", choices=unique(longitudinal$SES)),
selectInput("Age", "Select Age", choices = c("50-60", "60-70", "70-80", "80-90")),
textOutput("result")
)
server <- function(input, output, session) {
numpatients <-  reactive({longitudinal %>%
filter(SES==input$SES) %>%
nrow()
})
numdemented <-  reactive({longitudinal %>%
filter(SES==input$SES) %>%
filter(Group=='Demented') %>%
nrow()
})
output$result <- renderText({
c(numpatients(),"patients meet listed search criteria, out of which", numdemented(), "have dementia or approximately", round((numdemented()/numpatients())*100), "% of the sample")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
summary(hyper)
drop.nullmarkers(hyper)
summary(hyper)
drop.nullmarkers(hyper)
summary(hyper)
sug <- calc.genoprob(hyper, step=1)
out.em <- scanone(hyper)
hyper <- calc.genoprob(hyper, step=1)
out.em <- scanone(hyper)
hyper <- calc.genoprob(hyper, step=1)
out.em <- scanone(hyper)
summary(out.em)
hyper <- calc.genoprob(hyper, step=1)
out.em <- scanone(hyper)
summary(out.em)
plot(out.em, chr=c(7,15), ylab="LOD Score")
hyper[1]
arrange(out.em)
arrange(desc(out.em))
names <- list.files(path = "data/us_individual_collar_data", pattern = ".txt")
names_list <- strsplit(names, split = " .txt")
names_list
names_vec <- unlist(names_list)
names_vec
names(data_files) <- names_vec
names(data_files)
data_files_all <- bind_rows(data_files)
for (i in 1:length(data_files)){
data_files[i] <- as.data.frame(read_csv(data_files[i]))
}
names <- list.files(path = "data/us_individual_collar_data", pattern = ".txt")
names_list <- strsplit(names, split = " .txt")
names_list
names_vec <- unlist(names_list)
names_vec
names(data_files) <- names_vec
names(data_files)
data1 = readr::read_csv('data/us_individual_collar_data/collar-data-A1-2016-02-26.txt')
View(data1)
names <- list.files(path = "data/us_individual_collar_data", pattern = ".txt")
names_list <- strsplit(names, split = " .txt")
names_list
names_vec <- unlist(names_list)
names_vec
names(data_files) <- names_vec
names(data_files)
print(names_vec)
data1 = readr::read_csv('data/us_individual_collar_data/collar-data-A1-2016-02-26.txt')
data_files <- list.files("data/individual_collar_data", full.names = TRUE)
data_files
# only ggplot
for (i in 1:length(data_files)){
data <- as.data.frame(read_csv(data_files[i]))
print(
ggplot(data, aes(x=long,y=lat))+
geom_path()+
geom_point()+
labs(title = data_files[i], x = "longitude", y = "latitude")
)
}
names <- list.files(path = "data/us_individual_collar_data", pattern = ".txt")
names_list <- strsplit(names, split = " .txt")
names_list
names_vec <- unlist(names_list)
names_vec
names(data_files) <- names_vec
names(data_files)
print(names_vec)
data1 = readr::read_csv(cat('data', names_vec[1]))
library(qtl)
library(qtlcharts)
library(tidyverse)
library(ggmap)
library(here)
names <- list.files(path = "data/us_individual_collar_data", pattern = ".txt")
names_list <- strsplit(names, split = " .txt")
names_list
names_vec <- unlist(names_list)
names_vec
names(data_files) <- names_vec
names(data_files)
print(names_vec)
data1 = readr::read_csv(here('data', names_vec[1]))
names <- list.files(path = "data/us_individual_collar_data", pattern = ".txt")
names_list <- strsplit(names, split = " .txt")
names_list
names_vec <- unlist(names_list)
names_vec
names(data_files) <- names_vec
names(data_files)
print(names_vec)
setwd()
